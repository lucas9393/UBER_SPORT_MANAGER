// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using USM_EF_Helper;

namespace USM_EF_Helper.Migrations
{
    [DbContext(typeof(EFDBContext))]
    [Migration("20190228101735_CreateDatabase")]
    partial class CreateDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("USM_Model.Challenge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailableMembers");

                    b.Property<int>("ReservationId");

                    b.HasKey("Id");

                    b.HasIndex("ReservationId")
                        .IsUnique();

                    b.ToTable("Challenges");
                });

            modelBuilder.Entity("USM_Model.Field", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MaxPlayer");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.Property<int>("Sport");

                    b.Property<int>("SportType");

                    b.Property<int>("Terrain");

                    b.HasKey("Id");

                    b.ToTable("Fields");

                    b.HasDiscriminator<int>("SportType");
                });

            modelBuilder.Entity("USM_Model.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<DateTime?>("DateOfRegistration");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("USM_Model.MembersChallenges", b =>
                {
                    b.Property<int>("MemberId");

                    b.Property<int>("ChallengeId");

                    b.HasKey("MemberId", "ChallengeId");

                    b.HasIndex("ChallengeId");

                    b.ToTable("MembersChallenges");
                });

            modelBuilder.Entity("USM_Model.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ChallengeId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FieldId");

                    b.Property<bool>("IsDouble");

                    b.Property<int>("MemberId");

                    b.HasKey("Id");

                    b.HasIndex("FieldId");

                    b.HasIndex("MemberId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("USM_Model.PaddleField", b =>
                {
                    b.HasBaseType("USM_Model.Field");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("USM_Model.SoccerField", b =>
                {
                    b.HasBaseType("USM_Model.Field");

                    b.Property<bool>("IsSeven");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("USM_Model.TennisField", b =>
                {
                    b.HasBaseType("USM_Model.Field");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("USM_Model.Challenge", b =>
                {
                    b.HasOne("USM_Model.Reservation", "Reservation")
                        .WithOne("Challenge")
                        .HasForeignKey("USM_Model.Challenge", "ReservationId");
                });

            modelBuilder.Entity("USM_Model.MembersChallenges", b =>
                {
                    b.HasOne("USM_Model.Challenge", "Challenge")
                        .WithMany("MembersChallenges")
                        .HasForeignKey("ChallengeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USM_Model.Member", "Member")
                        .WithMany("MembersChallenges")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("USM_Model.Reservation", b =>
                {
                    b.HasOne("USM_Model.Field", "Field")
                        .WithMany("Reservations")
                        .HasForeignKey("FieldId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("USM_Model.Member", "Member")
                        .WithMany("Reservations")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
